Robotics 2
September 10, 2021
Exercise #1
Consider the planar 3R robot in Fig. 1. The three links have all equal length L. The robot
is controlled by a joint acceleration command u = q̈ ∈ R3 . The input commands are bounded
componentwise as |ui | ≤ Umax,i , for i = 1, 2, 3. Moreover, let p = f (q) ∈ R2 be the end-effector
position. At a given instant t = t0 , the robot is in a generic state (q(t0 ), q̇(t0 )) = (q 0 , q̇ 0 ) ∈ R6 , with
q̇ 0 6∈ N {J (q 0 )}. Which feasible command u0 = u(t0 ) would you apply to stop as fast as possible
the Cartesian motion of the end-effector, while keeping its velocity aligned with the direction of
ṗ0 = ṗ(t0 ) 6= 0? If there are multiple feasible solutions, provide the one having minimum norm.
Illustrate your findings with a numerical example, providing the values of q 0 , q̇ 0 , u0 , and of the
resulting acceleration p̈0 = p̈(t0 ).

q3

y0
L

q2

L

P

L

q1
x0

Figure 1: A planar 3R robot.
Exercise #2
For the same robot in Fig. 1, assume that the three links of equal length L = 0.5 [m] are all modeled
as thin rods with a uniformly distributed mass of m = 5 [kg]. Provide the eigenvalues of the 2 × 2
Cartesian inertia matrix M p , when the robot is in the regular configuration q ∗ = (π/2, π/2, 0).
Hint: Use an equivalent expression for the Cartesian inertia matrix M p = J −T M J −1 that applies
both to square and non-square Jacobians under the same full rank assumption.
Exercise #3
The end-effector of a 2-dof Cartesian robot with different link masses m1 and m2 moves in a vertical
plane (x, y) making contact with an environment. There is no force/torque sensor mounted on
the robot. Design an impedance control law that shapes the response between interacting forces
and tracking errors by assigning the same two real, negative and coincident eigenvalues (i.e., in
−λ < 0) to the closed-loop linear dynamics along the two decoupled directions x and y.
[180 minutes (3 hours); open books]

1

Solution
September 10, 2021
Exercise #1
The second-order differential kinematics of a robot with n joints performing a m-dimensional task
(with m ≤ n) is
p̈ = J (q)q̈ + J̇ (q)q̇ = J (q)u + h(q, q̇),
(1)
with vector h ∈ Rm being quadratic in q̇. The joint acceleration q̈ ∈ Rn is taken as the input
command u.
At time t = t0 , the task velocity is ṗ0 = ṗ(t0 ) = J (q(t0 )) q̇(t0 ) = J 0 q̇ 0 , which is necessarily
different from zero since one should choose a q̇ 0 6∈ N {J 0 }. We impose to the end-effector an
acceleration p̈0 (actually, a deceleration) that is aligned with ṗ0 and whose components are opposite
in sign to the associated velocity components. Therefore, we set
p̈0 = −λ ṗ0 = −λ J 0 q̇ 0 ,

with λ ≥ 0,

and choose the largest possible (non-negative) value for the scalar λ such that the minimum norm
joint acceleration solution u0 to (1) is feasible. It is then
#
#
u0 = J #
0 (p̈0 − h0 ) = −λ J 0 J 0 q̇ 0 − J 0 J̇ 0 q̇ 0 .

(2)

Define now the two n-dimensional vectors1
a = −J #
0 J 0 q̇ 0 ,

b = −J #
0 J̇ 0 q̇ 0 ,

(3)

and organize the bounds on the commands in vector form as


Umax,1
 Umax,2 


U max = 
.
..


.
Umax,n
The problem is formulated as a simple linear program (LP) as follows:
max λ

s.t.

− U max ≤ a λ + b ≤ U max ,

λ ≥ 0,

(4)

where vector inequalities are to be considered component-wise. Note first that a 6= 0 (although
some of its components may possibly vanish). In fact, ṗ0 = J 0 q̇ 0 6= 0 is a realizable velocity, as
generated by q̇ 0 6= 0; thus, the pseudoinverse of such task velocity cannot produce a zero joint
velocity. The feasible set may be empty, in which case no instantaneous acceleration solution
exists. Moreover, if the optimal value of problem (4) is λ = 0, the end-effector will not be able to
instantaneously decelerate; the problem has again no actual solution at t = t0 . Nonetheless, it is
convenient to keep the value λ = 0 in the feasible set, so as to guarantee the existence of a solution
to problem (4) whenever its (closed) feasible set is non-empty.
1 One can also define the two vectors a and b with a positive sign in front. Being the bounds on the command
u symmetric, the linear inequalities in (4) would remain the same.

2

The optimal solution λ∗ to (4) is easily found. For i = 1, . . . , n, let

−∞
if bi < −Umax,i and ai ≤ 0,






Umax,i − bi


if bi < −Umax,i and ai > 0,



ai






 max − Umax,i + bi , Umax,i − bi

if Umax,i ≤ bi ≤ Umax,i and ai =
6 0,
ai
ai
λi =




+∞
if Umax,i ≤ bi ≤ Umax,i and ai = 0,






Umax,i + bi


−
if bi > Umax,i and ai < 0,


ai



−∞
if bi > Umax,i and ai ≥ 0.

(5)

We compute then
λ∗ = min λi ,

(6)

i=1,...,n

with the following conclusions:
λ∗ > 0

⇒ λ∗ is the optimal solution, with a feasible acceleration u∗0 = aλ∗ + b;

λ∗ = 0

⇒ the resulting joint acceleration is u0 = −J #
0 J̇ 0 q̇ 0 , yielding p̈0 = 0;

λ∗ = −∞

⇒ there is no solution to the problem (the feasible set is empty).

In the optimal solution u∗0 , at least one joint acceleration will saturate one of its bounds. When
λ∗ = 0, the end-effector will keep instantaneously the same velocity ṗ0 , with no deceleration. When
there is no solution to the problem, the end-effector will no longer be able to move exactly along
the direction of ṗ0 (in either way). Some of the various possible situations for a generic single
component λi are illustrated in Fig. 2. Figure 3 shows geometrically some resulting cases for u∗0
with n = 2 components (thus, when m = 1).
𝜆" = −∞

ai ≤ 0

𝜆" =

ai > 0

$%&',) *+)
,)

>0

ui
bi

– Umax,i

0

Umax,i
ai = 0
⇒ 𝜆" = +∞

𝜆" = −

$%&',) 3+)
,)

>0

ai < 0

ai > 0

𝜆" =

$%&',) *+)
,)

>0

ui
– Umax,i

𝜆" = −

$%&',) 3+)
,)

0

bi

Umax,i
ai = 0
⇒ 𝜆" = +∞
ai < 0
ai > 0

>0

𝜆" = 0

ui
– Umax,i

0

bi = Umax,i

Figure 2: Examples of evaluation of λi for a generic single component.

3

u2
Umax,2
u0*

b

a
b

a
(with a1 = 0, a2 < 0)

Umax,1

– Umax,1

u1

0

b
a
a
no solution!

b

u0*

– Umax,2

u0*

Figure 3: Examples of existence or not of a solution u∗0 and its geometrical evaluation when n = 2.
For the planar 3R robot of Fig. 1, we have n = 3, m = 2, and the terms in (1) are the 2 × 3 task
Jacobian


− (s1 + s12 + s123 ) − (s12 + s123 ) −s123
∂f (q)
J (q) =
=L
,
(7)
∂q
c1 + c12 + c123
c12 + c123
c123
its time derivative
J̇ (q) = −L ·


c1 q̇1 + c12 (q̇1 + q̇2 ) + c123 (q̇1 + q̇2 + q̇3 )

c12 (q̇1 + q̇2 ) + c123 (q̇1 + q̇2 + q̇3 )

c123 (q̇1 + q̇2 + q̇3 )

s1 q̇1 + s12 (q̇1 + q̇2 ) + s123 (q̇1 + q̇2 + q̇3 )

s12 (q̇1 + q̇2 ) + s123 (q̇1 + q̇2 + q̇3 )

s123 (q̇1 + q̇2 + q̇3 )


,

and the product of matrix J̇ by the joint velocity q̇


(c1 + c12 + c123 ) q̇12 + 2 (c12 + c123 ) q̇1 q̇2 + 2 c123 q̇1 q̇3 + (c12 + c123 ) q̇22 + 2 c123 q̇2 q̇3 + c123 q̇32
h(q, q̇) = −L
,
2
2
2
(s1 + s12 + s123 ) q̇1 + 2 (s12 + s123 ) q̇1 q̇2 + 2 s123 q̇1 q̇3 + (s12 + s123 ) q̇2 + 2 s123 q̇2 q̇3 + s123 q̇3

having used the shorthand notation for trigonometric functions (e.g., c123 = cos(q1 + q2 + q3 )).
As a first numerical example, set L = 1 [m] for the

 
15 π

 
U max =  10 π  = 
10 π

link lengths and choose

47.1239

31.4159  [rad/s2 ]
31.4159

as values for the (symmetric) bounds for the acceleration commands. At time t = t0 , consider the
robot state2


 
0
π


 
q 0 =  π/2  [rad],
q̇ 0 =  π  [rad/s].
π/2
0
2 All these data are the same used in the first exercise of the exam of July 12, 2021. For the sake of illustration,
we provide hereafter also two other examples.

4

We compute then from the previous formulas


−1 −1 0
,
J0 =
0
1 1


ṗ0 = J 0 q̇ 0 =

−2 π
π


[m/s]

and

J̇ 0 =

π
−2 π

2π
−2 π

2π
0




,

h0 = J̇ 0 q̇ 0 =

3 π2
−4 π 2




=

29.6088
−39.4784



[m/s2 ].

The pseudoinverse of the task Jacobian is




T
T
J#
0 = J 0 J 0J 0

Therefore, from (3) we obtain



−π


a = −J #
0 ṗ0 =  −π  ,
0

−1

−2/3

=  −1/3
1/3


−1/3

1/3  .
2/3



 

2 π 2 /3
6.5797

 

2
b = −J #
0 h0 =  7 π /3  =  23.0291  .
5 π 2 /3
16.4493

None of the components of vector b (related to the Cartesian drift acceleration h0 ) is outside the
acceleration bounds specified by U max . As a result, according to the law (5–6), an optimal solution
certainly exists and is given by




−47.1239
107.4073


∗
∗
2
−1
[m/s2 ].
λ = 17.0944 [s ] ⇒ u0 =  −30.6745  [rad/s ] ⇒ p̈0 =
−53.7036
16.4493
As expected, there is at least a component of u∗0 that is saturated (only the first one, at its negative
lower bound). The obtained task acceleration is p̈0 = −λ∗ ṗ0 , as expected.
To verify further the method, consider now a joint velocity at time t = t0 which is 30% higher than
before, namely

  
4.0841
π

  
q̇ 0 = 1.3 ·  π  =  4.0841  [rad/s],
0
0
all the rest being the same. The changed terms are



−8.1681
4.0841
8.1681
ṗ0 =
[m/s], J̇ 0 =
4.0841
−8.1681 −8.1681
and thus




−4.0841


a =  −4.0841  ,
0

8.1681
0




,

h0 =

50.0389
−66.7185



[m/s2 ],




11.1198


b =  38.9191  .
27.7994

The second component b2 of vector b exceeds now the upper bound Umax,2 = 31.4159 [rad/s2 ].
However, a2 < 0 and thus an optimal solution exists. According to the law (5–6), we obtain


−47.1239


116.4873


∗
∗
−1
2
λ = 14.2612 [s ] ⇒ u0 =  −19.3245  [rad/s ] ⇒ p̈0 =
[m/s2 ].
−58.2436
27.7994
5

As before, the first component of u∗0 is saturated at its negative lower bound. Despite the norm
of the Cartesian acceleration p̈0 is now larger than before, the rate of decrease of the Cartesian
velocity is indeed slower because the optimal λ∗ is smaller. In fact, it is immediate to see that
p̈ = −λ ṗ

⇒

ṗ(t) = e−λ(t−t0 ) ṗ(t0 ) ' (1 − λ dt) ṗ0

ṗ(t) − ṗ0
' −λ ṗ0 ,
dt

⇒

for a sufficiently small dt = t − t0 > 0.
As a last example, we increase further the joint velocity at time t = t0 by 50% of the initial value,
namely
  

π
4.7124
  

q̇ 0 = 1.5 ·  π  =  4.7124  [rad/s],
0
0
all the rest being again the same. The changed terms are now




−9.4248
4.7124
9.4248 9.4248
ṗ0 =
[m/s], J̇ 0 =
,
4.7124
−9.4248 −9.4248
0
and


h0 =

66.6198
−88.8264



[m/s2 ],


14.8044


b =  51.8154  .
37.0110



−4.7124


a =  −4.7124  ,
0


The second and third components of b exceed their upper bounds Umax,2 = Umax,3 = 31.4159 [rad/s2 ].
However, since a3 = 0, no solution exists in this case. In fact, according to the law (5–6), it is
λ1 = 13.1416,

λ2 = 17.6622,

but λ3 = −∞

⇒

λ∗ = −∞.

Exercise #2
Note first that the m × m Cartesian inertia matrix of a robot with a m × n Jacobian J (q) that
has full rank m can always be written as3

−1
M p (q) = J (q)M −1 (q)J T(q)
,
(8)
where M (q) > 0 is the n × n inertia matrix in the configuration space. The derivation of (8) for
the case m < n (redundant robot) with a full rank Jacobian is simple. Let the robot dynamics in
joint space be
M (q)q̈ + c(q, q̇) + g(q) = τ ,
(9)
and the second-order differential kinematics to the Cartesian space be
p̈ = J (q)q̈ + J̇ (q)q̇.

(10)

Extracting q̈ from (9), using the transformation of generalized forces τ = J T(q)F , and substituting
in (10) yields


p̈ = J (q)M −1 (q) J T(q)F − c(q, q̇) − g(q) + J̇ (q)q̇




= J (q)M −1 (q)J T(q) F − J (q)M −1 (q) c(q, q̇) + g(q) + J̇ (q)q̇
3 The expression (8) appears also in the lecture slides on robot redundancy (block 2, part 2, p. 10) and on collision
detection and reaction (block 19, p. 40).

6

or
M p (q)p̈ + cp (q, q̇) + g p (q) = F ,
with M p (q) as in (8) and


cp (q, q̇) = M p (q) J (q)M −1 (q) c(q, q̇) − J̇ (q)q̇ ,

(11)

g p (q) = M p (q)J (q)M −1 (q) g(q).

Indeed, the dynamic description (11) is incomplete when m < n and should be complemented
by additional n − m dynamic equations (e.g., judiciously extracted from the original complete
dynamics (9) in the joint space). On the other hand, when the Jacobian is square (m = n) and
nonsingular, the terms in the (now complete) Cartesian dynamic model (11) simplify to
M p (q) = J −T(q)M (q)J −1 (q)
and
cp (q, q̇) = J −T(q) c(q, q̇) − M p (q)J̇ (q)q̇,

g p (q) = J −T(q) g(q).

The Jacobian of the planar 3R robot in Fig. 1 is given by (7). The inertia matrix M (q) is extracted
from the kinetic energy of the three links of the robot. Under the assumption of equal uniform
thin rods, the center of mass of each link is at dci = L/2 on its kinematic axis and the barycentral
inertia (around the axis normal to the plane) equals Ii = (1/12) mL2 . For the first link, we have
then
!
 2

1
L
1
1 mL2 2
1
md2c1 + I1 q̇12 =
m
+
mL2 q̇12 =
q̇ .
T1 =
2
2
2
12
2 3 1
For the second link, we have


1
c1 + c12


2
pc2 = L 

1
s1 + s12
2


1
s12 (q̇1 + q̇2 )


2
= L
,
1
c1 q̇1 + c12 (q̇1 + q̇2 )
2


⇒

v c2 = ṗc2

−s1 q̇1 −

and thus

1
2
2
m kv c2 k + I2 (q̇1 + q̇2 )
2




1
1
1
2
2
2
2
2
=
mL q̇1 + (q̇1 + q̇2 ) + c2 q̇1 (q̇1 + q̇2 ) +
mL (q̇1 + q̇2 )
2
4
12





1
4
2
1
= mL2
+ c2 q̇12 +
+ c2 q̇1 q̇2 + q̇22 .
2
3
3
3

T2 =

Finally, for the third link

1
c1 + c12 + c123


2
= L

1
s1 + s12 + s123
2


pc3

⇒

v c3



1
− s1 q̇1 + s12 (q̇1 + q̇2 ) + s123 (q̇1 + q̇2 + q̇3 )

2
= L
1
c1 q̇1 + c12 (q̇1 + q̇2 ) + c123 (q̇1 + q̇2 + q̇3 )
2


7



,

and so

1
2
2
m kv c3 k + I3 (q̇1 + q̇2 + q̇3 )
2


1
1
2
2
2
=
mL q̇12 + (q̇1 + q̇2 ) + (q̇1 + q̇2 + q̇3 ) + 2 c2 q̇1 (q̇1 + q̇2 )
2
4


1
2
+ c23 q̇1 (q̇1 + q̇2 + q̇3 ) + c3 (q̇1 + q̇2 ) (q̇1 + q̇2 + q̇3 ) +
mL2 (q̇1 + q̇2 + q̇3 )
.
12






1
7
8
2
= mL2
+ 2 c2 + c23 + c3 q̇12 +
+ 2 c2 + c23 + 2c3 q̇1 q̇2 +
+ c23 + c3 q̇1 q̇3
2
3
3
3





2
1
4
+ c3 q̇22 +
+ c3 q̇2 q̇3 + q̇32 .
+
3
3
3

T3 =

Therefore, from
T = T1 + T2 + T3 =

1 T
q̇ M (q)q̇
2

we obtain


4 + 3 c2 + c23 + c3

1
5 3
+ c2 + c23 + c3
3 2
2

..
.

5
+ c3
3

symm

···




2
M (q) = mL 




1 1
1
+ c23 + c3

3 2
2


1 1
.
+ c3

3 2


1
3

(12)

Since L = 0.5 [m] and mL2 = 5·0.52 = 1.25 [kgm2 ], evaluating eqs. (7) and (12) at the configuration
q ∗ = (π/2, π/2, 0) gives:


−0.5 0
0
∗
J = J (q ) =
,
−1 −1 −0.5
 25 10 25 


 4
3 24 
6.25 3.3333 1.0417


 10 10 25  

M = M (q ∗ ) = 
 '  3.3333 3.3333 1.0417  .

 3
3 24


1.0417 1.0417 0.4167
25 25 5
24

24

12

The Cartesian inertia matrix in (8) is
∗

35/3

0

!


'

M p = M p (q ) =
0

35/24

11.6667
0

0
1.4583


.

Its two eigenvalues are then
λ1 = 11.6667,

λ2 = 1.4583.

Note that the Cartesian inertia is fully decoupled in the configuration q ∗ . This is by no means the
generic case, although the matrix M p (q) is always symmetric, and also positive definite as long as
the Jacobian is full rank (its eigenvalues are always real, and strictly positive outside singularities).

8

Exercise #3
With reference to Fig. 4, the dynamic model of the 2-dof Cartesian robot in contact with a generic
environment is
M q̈ + g = τ + F ,
(13)
with

M=

m1 + m2
0

0
m2




,

g=

0
m2 g0




,

τ =

τ1
τ2




,

F =

Fx
Fy


,

where τ ∈ R2 is the control input force at the prismatic joints and F ∈ R2 is the contact force
exerted from the environment on the robot end effector.

y0

g0

m2

F

⊕

q2
q1
x0

⊕

𝜏#

m1

𝜏$

Figure 4: A 2-dof Cartesian robot making contact with an environment.
The desired linear and decoupled impedance model is
M d ë + D d ė + K d e = F ,
where


e = p − pd ,

p=

x
y




=

(14)
q1
q2


,

with pd ∈ R2 being the desired position of the robot end effector, and





Mdx
0
Ddx
0
Kdx
Md =
> 0,
Dd =
> 0,
Kd =
0
Mdy
0
Ddy
0

0
Kdy


> 0.

Since there is no force/torque sensor available, we have to choose necessarily the actual (Cartesian)
inertia as desired (apparent) inertia:
Md = M

⇐⇒

Mdx = m1 + m2 ,

Mdy = m2 .

(15)

From (13) and (14), with (15), the required control law is
τ = M p̈d + g − D d ė − K d e

 
 

(m1 + m2 ) ẍd
0
Ddx (ẋd − ẋ) + Kdx (xd − x)
=
+
+
,
m2 ÿd
m2 g0
Ddy (ẏd − ẏ) + Kdy (yd − y)
9

(16)

which has the standard form of a PD action with a feedforward acceleration term (if p̈d 6= 0)
and gravity cancellation. For the choice of the gains, we rewrite the impedance model (14), using
again (15), in the Laplace domain,

M s2 + D d s + K d e(s) = F (s),
and impose the desired dynamic characteristics between F (s) and e(s) in each Cartesian direction:
! 

2

(s + λ)
0
s2 + 2λs + λ2
0
−1
−1
2
Is + M D d s + M K d =
=
.
2
0
s2 + 2λs + λ2
0
(s + λ)
As a result,
Kdx = (m1 + m2 ) λ2 ,

Ddx = 2 (m1 + m2 ) λ,
and

Kdy = m2 λ2 .

Ddy = 2m2 λ,

∗∗∗∗∗

10

